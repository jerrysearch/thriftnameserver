#!/usr/bin/perl
# This Perl script open connection and call domains
# $jar stands for path of jmxterm jar file


# complete -f -W "meet clusterStatus serviceStatus serviceList offLine onLine loadService" nodetool

use strict;
use File::Basename;

my $command = shift @ARGV;

if($command eq "meet"){
	meet(@ARGV);
}elsif ($command eq "clusterStatus"){
	clusterStatus();
}elsif ($command eq "serviceStatus"){
	serviceStatus();
}elsif ($command eq "serviceList"){
	serviceList();
}elsif ($command eq "offLine"){
	offLine(@ARGV);
}elsif ($command eq "onLine"){
	onLine(@ARGV);
}elsif ($command eq "loadService"){
	loadService(@ARGV);
}else{
	print "meet <host> <host> ...\n";
	print "clusterStatus\n";
	print "serviceStatus\n";
	print "serviceStatus\n";
	print "offLine <serviceName> <Id>\n";
	print "onLine <serviceName> <host> <port> <pingFrequency>\n";
	print "loadService <file>\n";
	exit;
}


sub getPid {
	my $pid=`ps -ef | grep -e ThriftNameServer | grep -v grep | awk '{print \$2}'`;
	if($pid <= 0){
	print "Can't open the pid [thriftnameserver]\n";
	exit;
	}
	return $pid;
}

sub openJMX {
	my $dname = dirname(__FILE__);
	open JMX, "| java -jar " . $dname . "/jmxterm-1.0-alpha-4-uber.jar -n";
	my $pid = shift @_;
	print JMX "open $pid\n";
}

sub connectSNodeManager {
	print JMX "bean -d SNodeManagerMBean name=sNodeManagerMBean\n";
}

sub connectCNodeManager {
	print JMX "bean -d CNodeManagerMBean name=cNodeManagerMBean\n";
}

sub bye {
	print JMX "close\n";
	print JMX "bye\n";
	close JMX;
}

sub meet {
	if(@_ <= 0){
		print "<host> <host> ...\n";
		return;
	}
	my $pid = getPid();
	openJMX($pid);
	connectCNodeManager();
	while(@_ > 0){
		my $host = shift @_;
		print JMX "run meet $host\n";
	}
	bye();
}

sub clusterStatus {
	my $pid = getPid();
    openJMX($pid);
    connectCNodeManager();
    print JMX "run clusterStatus\n";
    bye();
}

sub serviceStatus {
	my $pid = getPid();
    openJMX($pid);
    connectSNodeManager();
    print JMX "run serviceStatus\n";
    bye();
}

sub serviceList {
	my $pid = getPid();
    openJMX($pid);
    connectSNodeManager();
    print JMX "run serviceList\n";
    bye();
}

sub offLine {
	if(@_ != 2) {
		print "<serviceName> <Id>\n";
		print "you can run serviceStatus to list all services\n";
		return;
	}
	my $pid = getPid();
    openJMX($pid);
    connectSNodeManager();
	my $serviceName = shift @_;
	my $id = shift @_;
    print JMX "run offLine $serviceName $id\n";
    bye();
}

sub onLine {
	if(@_ != 4) {
		print "<serviceName> <host> <port> <pingFrequency>\n";
		return;
	}
	my $pid = getPid();
    openJMX($pid);
    connectSNodeManager();
	my $serviceName = shift @_;
	my $host = shift @_;
	my $port = shift @_;
	my $pingFrequency = shift @_;
    print JMX "run onLine $serviceName $host $port $pingFrequency\n";
    bye();
}

sub loadService {
	my $file = shift @_;
	open (my $fh,'<:encoding(UTF-8)', $file) or die "Can't open the file $file: ";
	my $pid = getPid();
    openJMX($pid);
    connectSNodeManager();
	while (my $line =<$fh>)
	    {
    	      chomp ($line);
              my @array = split(" ", $line);
              if( @array == 4 ){
                 my($key1, $key2, $key3, $key4) = @array;
                 my $tmp = index $key1, '#';
                 if( $tmp != 0 ){
   	            print JMX "run onLine $key1 $key2 $key3 $key4\n";
                 }
              }
           }
	close $fh;
	bye();
}